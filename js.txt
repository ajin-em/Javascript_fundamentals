JAVASCRIPT
    Javascript is a programming language that is used to create interactive web pages.
    It is a client-side scripting language, which means that it is executed in the browser.
    It is a lightweight, interpreted language that is used to create dynamic web pages.
    It is a high-level language that is easy to learn and use.
    Javascript is a synchronous single threaded language.
    It means that it can only do one thing at a time. It can't do two things at the same time.

WORKING AND EXECUTION OF JS

    Everything in JS happens inside an execution context. Execution context has two parts, which is variable evironment and Tread of execution.
    Variable environment is a place where all the variables are stored. 
    Thread of execution is a place where all the code is executed.
    There are two types of execution context, Global execution context and Function execution context.
    Global execution context is the default execution context. It is created when the script starts to execute. 
    It is created before any function is called. Function execution context is created when a function is called.
    It is created after the global execution context is created.
    When a function is called, the global execution context is paused and the function execution context is created.
    When the function execution context is created, the variable environment is created. 
    The variable environment is created by the function.

LEXICAL SCOPE

    Lexical scope (also known as static scope) refers to the scope defined by the structure of the code at writing time.
    It determines how variable names are resolved in nested functions: the scope is defined by the physical placement of the variables and blocks in the source code.

    Scope: The region of the code where a variable is defined and accessible.
    Lexical: Refers to the way in which the structure of the code defines the scope.

BLOCK SCOPE
    Block scope refers to the scope that is created with curly braces {}.
    Variables declared inside a block are only accessible within that block.
    Block scope is introduced by using the let and const keywords. 
    Prior to ES6, JavaScript only had function scope and global scope, but ES6 introduced block scope.

CLOSURE
    closure is a feature where an inner function has access to the outer (enclosing) functionâ€™s variables. 
    A closure is created when a function is defined inside another function, 
    and the inner function retains access to the variables of the outer function even after the outer function has finished executing.

{% comment %} function Statement {% endcomment %}

    function a(){
        console.log("called a");
    }

{% comment %} function expression {% endcomment %}

    var b = function (){
        console.log("called b")
    }

{% comment %} function declaration {% endcomment %}

    function functionName(parameters) {
        // function body
    }
    function declaration and function Statement are same.